//===== BLE NIC BW Testing－Buck Data Traffic V1_0 ===== 24.05.13
//===== Board: MSP-EXP430G2ET, J-RXD:RXD(top)-P1.2, J-TXD:P1.1(top)-TXD
//===== Buck Data : 256 bytes ~ 8K bytes; CC2541: 256KB/8KB(RAM)
//===== 16M:DCO, 4M:SMCLK;HW-URAT(RXD:P1.1, TXD:P1.2):58400 bps (Slave->Master)
//===== SW-UART:TA1(P2.0Tx+P2.2Rx):38400 bps
//===== External INT(P1.3) for traffic trigger
//===== Data flow format: a00 ~ aFF, b00 ~ bFF, ..., z00 ~ zFF, back to a00 ~ aFF
//===== UART:Logic Analyzer tracer, BLE:Sniffer+ Network Analyzer (***)
//===== BDT-V1.0 code by J.R. Lai, NKUST EE, Taiwan, 2024.05.13 <<<<<<<-----------
//***** Storehouse/Trunk model for Loss Pattern and Bandwidth Analysis <<<<<<<----
//***** Next Step:
// HW_UART:58400 bps, TX:P1.2; Top:G-5-3-Tx-P1.1-D; Bottom:P1.2-Rx(USB)
// TA1, 38400 bps,TX:P2.0, RX:P2.2; BLE NIC: RX-TX
// Final : Z_BLE_UTL_CBR_V2_1.txt                           <<<<<<<<----------
//Workspace\Y_22_10_BLE_MCU_PRJ\1118_Exp6_9600\0207_BLE_NIC效能分析\CodeBANK
//===================================================================================
#include <msp430.h>
                        //----- 16M DCO version for MCLK, SMCLK: 4M ------------
#define UCA0_9600               //Define the UCA0 BAUD rate, Option A:UCA0_9600
//#define UCA0_115200  //Options:{UCA0_19200, UCA0_38400, UCA0_57600, UCA0_115200}

#define UART1_TBIT          (4000000 / 38400)        // 4M / 38400 = 104
#define UART1_TBIT_DIV_2    (4000000 / (38400 * 2))  //half of the PWM width

#define RX_TOGGLE_LED       (600)   //toggle LED P1.6 when RX ???? bytes

void Initialize();
void UCA0_UART_4M_init(void);       //4M, SMCLK:4M
void TA1_UART_init(void);        //1M, SMCLK:4M/4

void UCA0_TxString(char *string);           //Hardware UART
void UCA0_TxByte(char txByte);
void TimerA_UART1_tx(unsigned char txByte);   //Software UART on Timer1
void TimerA_UART1_print(char *string);

void TxBuckData(unsigned short cnt_BuckDataSize);       //on HW-UART


const char KUAS_EE[]="E.E. Dept., National Kaohsiung University of Science and Technology(NKUST),\
Taiwan 2024 May\r\n";
const char table_Dec2Hex[] = "0123456789ABCDEFG";       //table for Hex transformation

unsigned int tx0_Data,tx1_Data;             // SW UART GOLBAL variable for TX_ISR(), TimerA
unsigned char rx0_Buffer,rx1_Buffer;        // SW UART Received UART character
unsigned short  tmp_i;

//unsigned short  cnt=1;

int main(void){
    WDTCTL = WDTPW + WDTHOLD;

    Initialize();

    UCA0_TxString(KUAS_EE);
    UCA0_TxString("==1024 bytes@115200 bps!\r\n");   //description info in txt-file

    TimerA_UART1_print(KUAS_EE);
    TimerA_UART1_print(" [1] G2xx2 TimerA UART_1\r\n");
    //TimerA_UART1_print("READY! [S]lave Console.\r\n");
    //TimerA_UART1_print("READY! [M]aster Console.\r\n");

    for (;;){
    //---------------------(1) High CBR(constant bit rate): 1 byte --------
        TimerA_UART1_print("\r\n Press P1.3 button Trigger Traffic @ HW-UART");
        P1OUT |= BIT0;           P1OUT &= ~BIT6;        //LED indicator
        // Wait for P1.3 to trigger NEXT traffic load
        P1IES |=  BIT3;     P1IFG &= ~(BIT3);       P1IE  |=  BIT3;
        __bis_SR_register( LPM0_bits + GIE );       // WAIT Here <<==

        P1OUT |= BIT6;
        TimerA_UART1_print("\r\n Buck Data Traffic@HW-UART Running!");


        //UCA0_TxString("==256 bytes!\r\n");   //description info in txt-file


        //while(cnt--){
        TxBuckData( 1024 );        //BLE_NIC Slave :HW-URAT<<------- change parameter
        //}

        TimerA_UART1_print("\r\n BDTCBR@HW-UART Stop!\r\n");
        P1OUT &= ~BIT6;
        // Wait for P1.3 to trigger NEXT traffic load
        P1IES |=  BIT3;     P1IFG &= ~(BIT3);       P1IE  |=  BIT3;
        __bis_SR_register( LPM0_bits + GIE );

    }// end of for-1
    return 0;
} //end of main()

void Initialize(){
    //Basic Clock System Setup: 16M DCO, MCLK:16M, SMCLK:4M
    if (CALBC1_16MHZ == 0xFF)
        while(1);
    DCOCTL = 0;
    BCSCTL1 = CALBC1_16MHZ;      DCOCTL = CALDCO_16MHZ;
    BCSCTL1 &= ~(DIVA_3);       BCSCTL1 |= (XT2OFF + DIVA_0);   //ACLK/1
    BCSCTL2 |= DIVS_2;           //SMCLK = 16/4=4 M
    BCSCTL3 = LFXT1S_2;         //VLO -> ACLK

    //OUTPUT:LED Setup Port 1, 2 , general purpose
    P1DIR = 0xFF;           P1OUT = 0x00;
    P2DIR = 0xFF;           P2OUT = 0x00;

    //External Interrupt: P1.3 for Traffic Tx, P1.4: Reset Rx Report/Switch Timer
    P1DIR &= ~(BIT3);   P1REN |= BIT3;          P1OUT |=  BIT3;
    P1IES |=  BIT3;     P1IFG &= ~(BIT3);       P1IE  |=  BIT3;

    // UART: SW + HW
    TA1_UART_init();
    UCA0_UART_4M_init();

    __bis_SR_register(GIE);      //enable GIE
}// End of Init()

void TxBuckData(unsigned short cnt_BuckDataSize){
    static char dataFlow[4] = {'a', '0','0',0x00}; //'a'=0x61, '0'=0x30 0xa00~aFF, b00~bFF
    static char* ptr_TxByte = (char*) dataFlow;
    static const char*  ptr_TablePos1 = table_Dec2Hex;
    static const char*  ptr_TablePos2 = table_Dec2Hex;
    unsigned short cnt_TxByte = cnt_BuckDataSize;
    //pointer to constant string
    //const int* const ptr (4) ptr是一個指向一個const int的const指標（重要）

    while ( cnt_TxByte-- ){
        while ( !(IFG2 & UCA0TXIFG) );  //Polling, USCI_A0 TX buffer ready?
        UCA0TXBUF = *ptr_TxByte++;

        if( !(*ptr_TxByte) ){
            ptr_TxByte = (char*) dataFlow;           //Back to head of dataFlow array
            if ( dataFlow[2] != 'F' ){ //檢查第3位，如果不是??F就是還沒到底，++繼續數
                dataFlow[2] = *(++ptr_TablePos2);    //get NEXT vale in HexTable //??0->??1
              }//if- dataFlow[2], LSB update
            else if ( dataFlow[1] != 'F' ){ //檢查第2位，第3位已是F，如果不是?FF就繼續
                    ptr_TablePos2 = table_Dec2Hex;    //case: ??F
                    dataFlow[2] = *(ptr_TablePos2);   //
                    dataFlow[1] = *(++ptr_TablePos1);    //get NEXT vale in HexTable
              }//else-if- dataFlow[1]
                else if  ( dataFlow[0] != 'z' ){
                        ptr_TablePos2 = table_Dec2Hex;    //case: FF
                        dataFlow[2] = *(ptr_TablePos2);
                        ptr_TablePos1 = table_Dec2Hex;    //case: FF
                        dataFlow[1] = *(ptr_TablePos1);
                        dataFlow[0]++;                    //Next alphabetic
                  }//else-if dataFlow[0]
                    else{
                            ptr_TablePos2 = table_Dec2Hex;    //case: zFF
                            dataFlow[2] = *(ptr_TablePos2);
                            ptr_TablePos1 = table_Dec2Hex;    //case: FF
                            dataFlow[1] = *(ptr_TablePos1);
                            dataFlow[0] = 'a';                    //Next alphabetic
                      }//Layer-3, else, case:"zFF"
          }// end of if-TxByte, CR and update dataFlow
      }// end of while-cnt_TxByte, data-block size
}//end of TxBuckData()

void TA1_UART_init(void){
    /*    //  ==Timer_0
    TA0CCTL0 = OUT;                         // Set TXD Idle as Mark = '1'
    TA0CCTL1 = SCS + CM1 + CAP + CCIE;      //CCI1A RXD,Sync, Neg Edge(10), Capture, Int
    TA0CTL = TASSEL_2 + MC_2 + TACLR;       // SMCLK@1M, continuous mode(10)
    */

    // == Timer_1, SW_UART_1: TXD on P2.0 (TA1.0, OUT), RXD on P2.2 (Timer1_A.CCI1B input)
    P2DIR &= ~(BIT2);           P2SEL |= (BIT0 + BIT2);
    TA1CCTL0 = OUT;                         // Set TXD Idle as Mark = '1'
    TA1CCTL1 = CCIS_1 + SCS + CM1 + CAP + CCIE;     //CCI1B, Capture, Int
    //TA1CTL = TASSEL_2 + ID_2 + MC_2 + TACLR;       // 1M, SMCLK@4M, continuous mode(10), ID_2:/4
    TA1CTL = TASSEL_2 + MC_2 + TACLR;       // 38400, SMCLK@4M, continuous mode(10), ID_2:/4

}// End of TimerA_UART_init ()

void UCA0_UART_4M_init(void){
    // UCA0:    RXD on P1.1(UCA0RXD), TXD on P1.2(UCA0TXD)
    P1SEL |= (BIT1 + BIT2);     P1SEL2 |= (BIT1 + BIT2);
    // UCA0 BAUD Rate, RST, initialize
    UCA0CTL1 |= UCSSEL_2; // SMCLK, 4M <<<---------

#ifdef  UCA0_9600
           //----------9,600 bps-----------------------------
           UCA0BR0 = 0xA0;              // 416 = 0x1A0 4MHz 9600, slau144j, Table 15-4
           UCA0BR1 = 0x01;                // 4MHz 9600
           UCA0MCTL = UCBRS_6;          // Modulation UCBRSx = 6
           //--------------------------
#endif

#ifdef  UCA0_115200
           //----------115,200 bps-----------------------------
           UCA0BR0 = 34;              // 4MHz 115200, 40000/1152 = 34.72
           UCA0BR1 = 0;              // 16MHz 115200
           UCA0MCTL = UCBRS_6;       // Modulation UCBRSx = 6, 7/8 = 0.75
           //---------------------------
#endif

#ifdef  UCA0_19200
           //----------19,200 bps-----------------------------
           UCA0BR0 = 208;
           UCA0BR1 = 0;
           UCA0MCTL = UCBRS_3;
           //--------------------------
#endif

#ifdef  UCA0_38400
           //----------38,400 bps-----------------------------
           UCA0BR0 = 104;
           UCA0BR1 = 0;
           UCA0MCTL = UCBRS_1;
           //--------------------------
#endif

#ifdef  UCA0_56000
           //----------56,000 bps-----------------------------
           UCA0BR0 = 71;          //4000/56 = 71.42
           UCA0BR1 = 0;
           UCA0MCTL = UCBRS_4;      // 3/8=0.375
           //--------------------------
#endif

#ifdef  UCA0_57600
           //----------56,000 bps-----------------------------
           UCA0BR0 = 69;          //40000/576=69.44
           UCA0BR1 = 0;
           UCA0MCTL = UCBRS_3;
           //--------------------------
#endif
           UCA0CTL1 &= ~(UCSWRST);
           IE2 |= UCA0RXIE; // Enable USCI_A0 RX interrupt
}// End of UCA0_UART_init ()

void UCA0_TxString(char *string){
    while (*string) {
        while ( !(IFG2 & UCA0TXIFG) );  //Polling, USCI_A0 TX buffer ready?
        UCA0TXBUF = *string++;
    }//end of while-string
}// End of UCA0_TxString()

void UCA0_TxByte(char txByte){
   while ( !(IFG2 & UCA0TXIFG) );  //Polling, USCI_A0 TX buffer ready?
   UCA0TXBUF = txByte;

}// End of UCA0_TxByte()

void TimerA_UART1_tx(unsigned char txByte){
    while (TA1CCTL0 & CCIE);            // wait here till last character tx(OK)
    TA1CCR0 = TA1R;                         // Current state of TA counter
    TA1CCR0 += UART1_TBIT;              // One bit time (timer)
    TA1CCTL0 = OUTMOD0 + CCIE;          // Set(mode 1:SET) TXD on EQU0, Int

    tx1_Data = txByte;                        // data bits (8)
    tx1_Data |= 0x100;                  // Add mark STOP bit(1) to TXData
    tx1_Data <<= 1;                     // Add space START bit(0), 10 bits
}// End of TimerA_UART1_tx()

void TimerA_UART1_print(char *string){
    while (*string) {
        TimerA_UART1_tx(*string++);
    }
}// End of TimerA_UART1_print()


//******************* ISR ***********************************
#pragma vector = TIMER0_A0_VECTOR
__interrupt void Timer0_A0_ISR(void){

}// End of Timer0_A0_ISR(),TA0CCR0 CCIFG only

#pragma vector = TIMER0_A1_VECTOR
__interrupt void Timer0_A1_ISR(void){

    switch( TA0IV ) {
        case  2:                            //CCR1 unused
        case  4:                            // CCR2,unused
        case 10:
        default:
                break;
    }//end of switch-TA0IV
}// End of Timer0_A1_ISR(),shared by TA0CCR1,TA0CCR2 CCIFG and TAIFG

#pragma vector = TIMER1_A0_VECTOR //SW-UART-tx
__interrupt void Timer1_A0_ISR(void){
static unsigned char txBitCnt = 10;     //Start_BIT + 1 Byte + Stop_BIT 於計數發送的位數，初始值為10（包含1個起始位、8個數據位和1個停止位）

    TA1CCR0 += UART1_TBIT;              // Add Offset to CCRx, timer
    if (txBitCnt == 0) {                // TX bit count, 10 bits to TX? 檢查是否所有位都已經發送完畢
        TA1CCTL0 &= ~(CCIE);            // All bits TXed, disable interrupt 如果所有位都已經發送，禁用中斷
        txBitCnt = 10;                  // Re-load bit counter 重置位計數器，準備下一次發送
    }
    else {
        if (tx1_Data & 0x01) { //檢查待發送數據的最低位（LSB）
            TA1CCTL0 &= ~OUTMOD2;       //001, back to SET,:TX Mark '1' 如果最低位是1，設置Timer輸出模式為SET，發送邏輯1
        }
        else {
            TA1CCTL0 |= OUTMOD2;        //RESET(Mode 5,101),TX Space '0' 如果最低位是0，設置Timer輸出模式為RESET，發送邏輯0
        }
    tx1_Data >>= 1; //右移待發送數據，準備發送下一位
    txBitCnt--;
    }//end of else-txBitcnt

}// End of Timer1_A0_ISR(),TA1CCR0 CCIFG only

#pragma vector = TIMER1_A1_VECTOR
__interrupt void Timer1_A1_ISR(void){
static unsigned char rxBitCnt = 8;
static unsigned char rxData = 0;

    switch( TA1IV ) {
        case  2: //處理CCR1中斷。這是主要的UART接收處理部分
            TA1CCR1 += UART1_TBIT;      // Add Offset to CCRx, Next BIT detection 更新TA1CCR1，設置下一次中斷觸發時間
            if (TA1CCTL1 & CAP) {           // Start bit captured ! 檢查是否捕獲到起始位
                TA1CCTL1 &= ~(CAP); // STOP capture, use TIMER detection instead 停止捕獲模式，轉為定時器模式
                TA1CCR1 += UART1_TBIT_DIV_2;    // Point CCRx to middle of D0 調整CCR1，對準數據位的中間位置
            }
            else {
                rxData >>= 1;               //default Dx = 0 右移rxData，準備接收下一位
                if (TA1CCTL1 & SCCI) {      // Synchronized capture/compare input 如果接收到的是1，將其放置在最高位（BIT7）
                rxData |= 0x80;             //Rx bit placed at BIT7
                }
                rxBitCnt--; //減少接收位計數
                if (rxBitCnt == 0) {        // All bits RXed? 所有位接收完畢
                    rx1_Buffer = rxData;        // Store in global variable 將接收到的數據存入全局變量
                    rxBitCnt = 8;           // Re-load bit counter 重置位計數器
                    TA1CCTL1 |= CAP;        // One byte RX ok, Back to capture mode 恢復捕獲模式，準備接收下一個字節
                    __bic_SR_register_on_exit(LPM0_bits);  //**wake up to echo back 退出低功耗模式，返回主程序執行
                }
            }//end of else-CAP
                break;
        case  4:                            // CCR2,unused
        case 10:                        // TAIFG overflow,unused
        default:
                break;
    }//end of switch-TA1IV
}// End of Timer1_A1_ISR(),shared by TA0CCR1,TA0CCR2 CCIFG and TAIFG

#pragma vector = USCIAB0RX_VECTOR
__interrupt void USCI0RX_ISR(void){
static unsigned short countByte = 0;
static unsigned short toggleLED = RX_TOGGLE_LED;
unsigned short rxData;

   countByte++;

   if ( !(toggleLED--) ){
       toggleLED = RX_TOGGLE_LED;      //restore Value, smaller value, faster blinking
       P1OUT ^= BIT6;                  //toggle LED2(G)
     }// end of if-toggtleLED

   /*
   if ( !(countByte & 0x1FF) ){
       TimerA_UART1_print ("\r\n Rx UCA0: Block 512 Bytes, received @ 9600 bps");
       _nop();
     }//end of if-countByte
    */
   rxData = UCA0RXBUF;          //receive RXBUF, for NEXT RX Byte

   //UCA0TXBUF = UCA0RXBUF;
   //rx0_Buffer = UCA0RXBUF;
   //_bic_SR_register_on_exit(LPM0_bits);  //wake up to echo back

}// End of USCI0RX_ISR()

#pragma vector = PORT1_VECTOR
__interrupt void PORT1_ISR(void){
    __delay_cycles(160000);
    if ( !(P1IN & BIT3)){
        P1IE  &= ~(BIT3);       P1IFG  &= ~(BIT3);      //disable and clear
        __bic_SR_register_on_exit(LPM3_bits);        //always exit and wake up
    }//end of if P1.3, de-bouncing
    //P1IE  |= BIT3;          //Re-Enable P1 INT
}// End of PORT1_ISR()

#pragma vector = WDT_VECTOR
__interrupt void WDT_ISR(void){
    WDTCTL = WDTPW + WDTHOLD;       //hold the WDT
    IE1 &= ~(WDTIE);        IFG1 &= ~(WDTIFG);
    __bic_SR_register_on_exit(LPM3_bits);        //always exit and wake up
}// End of WDT_ISR()


//END of PROGRAM $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
